//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: warp.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `WarpClient`, then call methods of this protocol to make API calls.
internal protocol WarpClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: WarpClientInterceptorFactoryProtocol? { get }

  func checkDuplexConnection(
    _ request: LookupName,
    callOptions: CallOptions?
  ) -> UnaryCall<LookupName, HaveDuplex>

  func waitingForDuplex(
    _ request: LookupName,
    callOptions: CallOptions?
  ) -> UnaryCall<LookupName, HaveDuplex>

  func getRemoteMachineInfo(
    _ request: LookupName,
    callOptions: CallOptions?
  ) -> UnaryCall<LookupName, RemoteMachineInfo>

  func getRemoteMachineAvatar(
    _ request: LookupName,
    callOptions: CallOptions?,
    handler: @escaping (RemoteMachineAvatar) -> Void
  ) -> ServerStreamingCall<LookupName, RemoteMachineAvatar>

  func processTransferOpRequest(
    _ request: TransferOpRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<TransferOpRequest, VoidType>

  func pauseTransferOp(
    _ request: OpInfo,
    callOptions: CallOptions?
  ) -> UnaryCall<OpInfo, VoidType>

  func startTransfer(
    _ request: OpInfo,
    callOptions: CallOptions?,
    handler: @escaping (FileChunk) -> Void
  ) -> ServerStreamingCall<OpInfo, FileChunk>

  func cancelTransferOpRequest(
    _ request: OpInfo,
    callOptions: CallOptions?
  ) -> UnaryCall<OpInfo, VoidType>

  func stopTransfer(
    _ request: StopInfo,
    callOptions: CallOptions?
  ) -> UnaryCall<StopInfo, VoidType>

  func ping(
    _ request: LookupName,
    callOptions: CallOptions?
  ) -> UnaryCall<LookupName, VoidType>
}

extension WarpClientProtocol {
  internal var serviceName: String {
    return "Warp"
  }

  /// Sender methods
  /// api v1 duplex method (ping style)
  ///
  /// - Parameters:
  ///   - request: Request to send to CheckDuplexConnection.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func checkDuplexConnection(
    _ request: LookupName,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<LookupName, HaveDuplex> {
    return self.makeUnaryCall(
      path: WarpClientMetadata.Methods.checkDuplexConnection.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCheckDuplexConnectionInterceptors() ?? []
    )
  }

  /// api v2 duplex method (block/future)
  ///
  /// - Parameters:
  ///   - request: Request to send to WaitingForDuplex.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func waitingForDuplex(
    _ request: LookupName,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<LookupName, HaveDuplex> {
    return self.makeUnaryCall(
      path: WarpClientMetadata.Methods.waitingForDuplex.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWaitingForDuplexInterceptors() ?? []
    )
  }

  /// Unary call to GetRemoteMachineInfo
  ///
  /// - Parameters:
  ///   - request: Request to send to GetRemoteMachineInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getRemoteMachineInfo(
    _ request: LookupName,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<LookupName, RemoteMachineInfo> {
    return self.makeUnaryCall(
      path: WarpClientMetadata.Methods.getRemoteMachineInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetRemoteMachineInfoInterceptors() ?? []
    )
  }

  /// Server streaming call to GetRemoteMachineAvatar
  ///
  /// - Parameters:
  ///   - request: Request to send to GetRemoteMachineAvatar.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func getRemoteMachineAvatar(
    _ request: LookupName,
    callOptions: CallOptions? = nil,
    handler: @escaping (RemoteMachineAvatar) -> Void
  ) -> ServerStreamingCall<LookupName, RemoteMachineAvatar> {
    return self.makeServerStreamingCall(
      path: WarpClientMetadata.Methods.getRemoteMachineAvatar.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetRemoteMachineAvatarInterceptors() ?? [],
      handler: handler
    )
  }

  /// Unary call to ProcessTransferOpRequest
  ///
  /// - Parameters:
  ///   - request: Request to send to ProcessTransferOpRequest.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func processTransferOpRequest(
    _ request: TransferOpRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<TransferOpRequest, VoidType> {
    return self.makeUnaryCall(
      path: WarpClientMetadata.Methods.processTransferOpRequest.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProcessTransferOpRequestInterceptors() ?? []
    )
  }

  /// Unary call to PauseTransferOp
  ///
  /// - Parameters:
  ///   - request: Request to send to PauseTransferOp.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func pauseTransferOp(
    _ request: OpInfo,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<OpInfo, VoidType> {
    return self.makeUnaryCall(
      path: WarpClientMetadata.Methods.pauseTransferOp.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePauseTransferOpInterceptors() ?? []
    )
  }

  /// Receiver methods
  ///
  /// - Parameters:
  ///   - request: Request to send to StartTransfer.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func startTransfer(
    _ request: OpInfo,
    callOptions: CallOptions? = nil,
    handler: @escaping (FileChunk) -> Void
  ) -> ServerStreamingCall<OpInfo, FileChunk> {
    return self.makeServerStreamingCall(
      path: WarpClientMetadata.Methods.startTransfer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStartTransferInterceptors() ?? [],
      handler: handler
    )
  }

  /// Both
  ///
  /// - Parameters:
  ///   - request: Request to send to CancelTransferOpRequest.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func cancelTransferOpRequest(
    _ request: OpInfo,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<OpInfo, VoidType> {
    return self.makeUnaryCall(
      path: WarpClientMetadata.Methods.cancelTransferOpRequest.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelTransferOpRequestInterceptors() ?? []
    )
  }

  /// Unary call to StopTransfer
  ///
  /// - Parameters:
  ///   - request: Request to send to StopTransfer.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func stopTransfer(
    _ request: StopInfo,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<StopInfo, VoidType> {
    return self.makeUnaryCall(
      path: WarpClientMetadata.Methods.stopTransfer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStopTransferInterceptors() ?? []
    )
  }

  /// Unary call to Ping
  ///
  /// - Parameters:
  ///   - request: Request to send to Ping.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func ping(
    _ request: LookupName,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<LookupName, VoidType> {
    return self.makeUnaryCall(
      path: WarpClientMetadata.Methods.ping.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePingInterceptors() ?? []
    )
  }
}

internal final class WarpClient: WarpClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: WarpClientInterceptorFactoryProtocol?

  /// Creates a client for the Warp service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: WarpClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.5.2) && canImport(_Concurrency)
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol WarpAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: WarpClientInterceptorFactoryProtocol? { get }

  func makeCheckDuplexConnectionCall(
    _ request: LookupName,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<LookupName, HaveDuplex>

  func makeWaitingForDuplexCall(
    _ request: LookupName,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<LookupName, HaveDuplex>

  func makeGetRemoteMachineInfoCall(
    _ request: LookupName,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<LookupName, RemoteMachineInfo>

  func makeGetRemoteMachineAvatarCall(
    _ request: LookupName,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<LookupName, RemoteMachineAvatar>

  func makeProcessTransferOpRequestCall(
    _ request: TransferOpRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<TransferOpRequest, VoidType>

  func makePauseTransferOpCall(
    _ request: OpInfo,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<OpInfo, VoidType>

  func makeStartTransferCall(
    _ request: OpInfo,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<OpInfo, FileChunk>

  func makeCancelTransferOpRequestCall(
    _ request: OpInfo,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<OpInfo, VoidType>

  func makeStopTransferCall(
    _ request: StopInfo,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<StopInfo, VoidType>

  func makePingCall(
    _ request: LookupName,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<LookupName, VoidType>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension WarpAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return WarpClientMetadata.serviceDescriptor
  }

  internal var interceptors: WarpClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeCheckDuplexConnectionCall(
    _ request: LookupName,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<LookupName, HaveDuplex> {
    return self.makeAsyncUnaryCall(
      path: WarpClientMetadata.Methods.checkDuplexConnection.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCheckDuplexConnectionInterceptors() ?? []
    )
  }

  internal func makeWaitingForDuplexCall(
    _ request: LookupName,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<LookupName, HaveDuplex> {
    return self.makeAsyncUnaryCall(
      path: WarpClientMetadata.Methods.waitingForDuplex.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWaitingForDuplexInterceptors() ?? []
    )
  }

  internal func makeGetRemoteMachineInfoCall(
    _ request: LookupName,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<LookupName, RemoteMachineInfo> {
    return self.makeAsyncUnaryCall(
      path: WarpClientMetadata.Methods.getRemoteMachineInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetRemoteMachineInfoInterceptors() ?? []
    )
  }

  internal func makeGetRemoteMachineAvatarCall(
    _ request: LookupName,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<LookupName, RemoteMachineAvatar> {
    return self.makeAsyncServerStreamingCall(
      path: WarpClientMetadata.Methods.getRemoteMachineAvatar.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetRemoteMachineAvatarInterceptors() ?? []
    )
  }

  internal func makeProcessTransferOpRequestCall(
    _ request: TransferOpRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<TransferOpRequest, VoidType> {
    return self.makeAsyncUnaryCall(
      path: WarpClientMetadata.Methods.processTransferOpRequest.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProcessTransferOpRequestInterceptors() ?? []
    )
  }

  internal func makePauseTransferOpCall(
    _ request: OpInfo,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<OpInfo, VoidType> {
    return self.makeAsyncUnaryCall(
      path: WarpClientMetadata.Methods.pauseTransferOp.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePauseTransferOpInterceptors() ?? []
    )
  }

  internal func makeStartTransferCall(
    _ request: OpInfo,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<OpInfo, FileChunk> {
    return self.makeAsyncServerStreamingCall(
      path: WarpClientMetadata.Methods.startTransfer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStartTransferInterceptors() ?? []
    )
  }

  internal func makeCancelTransferOpRequestCall(
    _ request: OpInfo,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<OpInfo, VoidType> {
    return self.makeAsyncUnaryCall(
      path: WarpClientMetadata.Methods.cancelTransferOpRequest.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelTransferOpRequestInterceptors() ?? []
    )
  }

  internal func makeStopTransferCall(
    _ request: StopInfo,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<StopInfo, VoidType> {
    return self.makeAsyncUnaryCall(
      path: WarpClientMetadata.Methods.stopTransfer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStopTransferInterceptors() ?? []
    )
  }

  internal func makePingCall(
    _ request: LookupName,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<LookupName, VoidType> {
    return self.makeAsyncUnaryCall(
      path: WarpClientMetadata.Methods.ping.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePingInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension WarpAsyncClientProtocol {
  internal func checkDuplexConnection(
    _ request: LookupName,
    callOptions: CallOptions? = nil
  ) async throws -> HaveDuplex {
    return try await self.performAsyncUnaryCall(
      path: WarpClientMetadata.Methods.checkDuplexConnection.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCheckDuplexConnectionInterceptors() ?? []
    )
  }

  internal func waitingForDuplex(
    _ request: LookupName,
    callOptions: CallOptions? = nil
  ) async throws -> HaveDuplex {
    return try await self.performAsyncUnaryCall(
      path: WarpClientMetadata.Methods.waitingForDuplex.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWaitingForDuplexInterceptors() ?? []
    )
  }

  internal func getRemoteMachineInfo(
    _ request: LookupName,
    callOptions: CallOptions? = nil
  ) async throws -> RemoteMachineInfo {
    return try await self.performAsyncUnaryCall(
      path: WarpClientMetadata.Methods.getRemoteMachineInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetRemoteMachineInfoInterceptors() ?? []
    )
  }

  internal func getRemoteMachineAvatar(
    _ request: LookupName,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<RemoteMachineAvatar> {
    return self.performAsyncServerStreamingCall(
      path: WarpClientMetadata.Methods.getRemoteMachineAvatar.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetRemoteMachineAvatarInterceptors() ?? []
    )
  }

  internal func processTransferOpRequest(
    _ request: TransferOpRequest,
    callOptions: CallOptions? = nil
  ) async throws -> VoidType {
    return try await self.performAsyncUnaryCall(
      path: WarpClientMetadata.Methods.processTransferOpRequest.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProcessTransferOpRequestInterceptors() ?? []
    )
  }

  internal func pauseTransferOp(
    _ request: OpInfo,
    callOptions: CallOptions? = nil
  ) async throws -> VoidType {
    return try await self.performAsyncUnaryCall(
      path: WarpClientMetadata.Methods.pauseTransferOp.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePauseTransferOpInterceptors() ?? []
    )
  }

  internal func startTransfer(
    _ request: OpInfo,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<FileChunk> {
    return self.performAsyncServerStreamingCall(
      path: WarpClientMetadata.Methods.startTransfer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStartTransferInterceptors() ?? []
    )
  }

  internal func cancelTransferOpRequest(
    _ request: OpInfo,
    callOptions: CallOptions? = nil
  ) async throws -> VoidType {
    return try await self.performAsyncUnaryCall(
      path: WarpClientMetadata.Methods.cancelTransferOpRequest.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelTransferOpRequestInterceptors() ?? []
    )
  }

  internal func stopTransfer(
    _ request: StopInfo,
    callOptions: CallOptions? = nil
  ) async throws -> VoidType {
    return try await self.performAsyncUnaryCall(
      path: WarpClientMetadata.Methods.stopTransfer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStopTransferInterceptors() ?? []
    )
  }

  internal func ping(
    _ request: LookupName,
    callOptions: CallOptions? = nil
  ) async throws -> VoidType {
    return try await self.performAsyncUnaryCall(
      path: WarpClientMetadata.Methods.ping.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePingInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct WarpAsyncClient: WarpAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: WarpClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: WarpClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.5.2) && canImport(_Concurrency)

internal protocol WarpClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'checkDuplexConnection'.
  func makeCheckDuplexConnectionInterceptors() -> [ClientInterceptor<LookupName, HaveDuplex>]

  /// - Returns: Interceptors to use when invoking 'waitingForDuplex'.
  func makeWaitingForDuplexInterceptors() -> [ClientInterceptor<LookupName, HaveDuplex>]

  /// - Returns: Interceptors to use when invoking 'getRemoteMachineInfo'.
  func makeGetRemoteMachineInfoInterceptors() -> [ClientInterceptor<LookupName, RemoteMachineInfo>]

  /// - Returns: Interceptors to use when invoking 'getRemoteMachineAvatar'.
  func makeGetRemoteMachineAvatarInterceptors() -> [ClientInterceptor<LookupName, RemoteMachineAvatar>]

  /// - Returns: Interceptors to use when invoking 'processTransferOpRequest'.
  func makeProcessTransferOpRequestInterceptors() -> [ClientInterceptor<TransferOpRequest, VoidType>]

  /// - Returns: Interceptors to use when invoking 'pauseTransferOp'.
  func makePauseTransferOpInterceptors() -> [ClientInterceptor<OpInfo, VoidType>]

  /// - Returns: Interceptors to use when invoking 'startTransfer'.
  func makeStartTransferInterceptors() -> [ClientInterceptor<OpInfo, FileChunk>]

  /// - Returns: Interceptors to use when invoking 'cancelTransferOpRequest'.
  func makeCancelTransferOpRequestInterceptors() -> [ClientInterceptor<OpInfo, VoidType>]

  /// - Returns: Interceptors to use when invoking 'stopTransfer'.
  func makeStopTransferInterceptors() -> [ClientInterceptor<StopInfo, VoidType>]

  /// - Returns: Interceptors to use when invoking 'ping'.
  func makePingInterceptors() -> [ClientInterceptor<LookupName, VoidType>]
}

internal enum WarpClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Warp",
    fullName: "Warp",
    methods: [
      WarpClientMetadata.Methods.checkDuplexConnection,
      WarpClientMetadata.Methods.waitingForDuplex,
      WarpClientMetadata.Methods.getRemoteMachineInfo,
      WarpClientMetadata.Methods.getRemoteMachineAvatar,
      WarpClientMetadata.Methods.processTransferOpRequest,
      WarpClientMetadata.Methods.pauseTransferOp,
      WarpClientMetadata.Methods.startTransfer,
      WarpClientMetadata.Methods.cancelTransferOpRequest,
      WarpClientMetadata.Methods.stopTransfer,
      WarpClientMetadata.Methods.ping,
    ]
  )

  internal enum Methods {
    internal static let checkDuplexConnection = GRPCMethodDescriptor(
      name: "CheckDuplexConnection",
      path: "/Warp/CheckDuplexConnection",
      type: GRPCCallType.unary
    )

    internal static let waitingForDuplex = GRPCMethodDescriptor(
      name: "WaitingForDuplex",
      path: "/Warp/WaitingForDuplex",
      type: GRPCCallType.unary
    )

    internal static let getRemoteMachineInfo = GRPCMethodDescriptor(
      name: "GetRemoteMachineInfo",
      path: "/Warp/GetRemoteMachineInfo",
      type: GRPCCallType.unary
    )

    internal static let getRemoteMachineAvatar = GRPCMethodDescriptor(
      name: "GetRemoteMachineAvatar",
      path: "/Warp/GetRemoteMachineAvatar",
      type: GRPCCallType.serverStreaming
    )

    internal static let processTransferOpRequest = GRPCMethodDescriptor(
      name: "ProcessTransferOpRequest",
      path: "/Warp/ProcessTransferOpRequest",
      type: GRPCCallType.unary
    )

    internal static let pauseTransferOp = GRPCMethodDescriptor(
      name: "PauseTransferOp",
      path: "/Warp/PauseTransferOp",
      type: GRPCCallType.unary
    )

    internal static let startTransfer = GRPCMethodDescriptor(
      name: "StartTransfer",
      path: "/Warp/StartTransfer",
      type: GRPCCallType.serverStreaming
    )

    internal static let cancelTransferOpRequest = GRPCMethodDescriptor(
      name: "CancelTransferOpRequest",
      path: "/Warp/CancelTransferOpRequest",
      type: GRPCCallType.unary
    )

    internal static let stopTransfer = GRPCMethodDescriptor(
      name: "StopTransfer",
      path: "/Warp/StopTransfer",
      type: GRPCCallType.unary
    )

    internal static let ping = GRPCMethodDescriptor(
      name: "Ping",
      path: "/Warp/Ping",
      type: GRPCCallType.unary
    )
  }
}

/// Usage: instantiate `WarpRegistrationClient`, then call methods of this protocol to make API calls.
internal protocol WarpRegistrationClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: WarpRegistrationClientInterceptorFactoryProtocol? { get }

  func requestCertificate(
    _ request: RegRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<RegRequest, RegResponse>
}

extension WarpRegistrationClientProtocol {
  internal var serviceName: String {
    return "WarpRegistration"
  }

  /// Unary call to RequestCertificate
  ///
  /// - Parameters:
  ///   - request: Request to send to RequestCertificate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func requestCertificate(
    _ request: RegRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<RegRequest, RegResponse> {
    return self.makeUnaryCall(
      path: WarpRegistrationClientMetadata.Methods.requestCertificate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestCertificateInterceptors() ?? []
    )
  }
}

internal final class WarpRegistrationClient: WarpRegistrationClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: WarpRegistrationClientInterceptorFactoryProtocol?

  /// Creates a client for the WarpRegistration service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: WarpRegistrationClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.5.2) && canImport(_Concurrency)
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol WarpRegistrationAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: WarpRegistrationClientInterceptorFactoryProtocol? { get }

  func makeRequestCertificateCall(
    _ request: RegRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<RegRequest, RegResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension WarpRegistrationAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return WarpRegistrationClientMetadata.serviceDescriptor
  }

  internal var interceptors: WarpRegistrationClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeRequestCertificateCall(
    _ request: RegRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<RegRequest, RegResponse> {
    return self.makeAsyncUnaryCall(
      path: WarpRegistrationClientMetadata.Methods.requestCertificate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestCertificateInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension WarpRegistrationAsyncClientProtocol {
  internal func requestCertificate(
    _ request: RegRequest,
    callOptions: CallOptions? = nil
  ) async throws -> RegResponse {
    return try await self.performAsyncUnaryCall(
      path: WarpRegistrationClientMetadata.Methods.requestCertificate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestCertificateInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct WarpRegistrationAsyncClient: WarpRegistrationAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: WarpRegistrationClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: WarpRegistrationClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.5.2) && canImport(_Concurrency)

internal protocol WarpRegistrationClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'requestCertificate'.
  func makeRequestCertificateInterceptors() -> [ClientInterceptor<RegRequest, RegResponse>]
}

internal enum WarpRegistrationClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "WarpRegistration",
    fullName: "WarpRegistration",
    methods: [
      WarpRegistrationClientMetadata.Methods.requestCertificate,
    ]
  )

  internal enum Methods {
    internal static let requestCertificate = GRPCMethodDescriptor(
      name: "RequestCertificate",
      path: "/WarpRegistration/RequestCertificate",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol WarpProvider: CallHandlerProvider {
  var interceptors: WarpServerInterceptorFactoryProtocol? { get }

  /// Sender methods
  /// api v1 duplex method (ping style)
  func checkDuplexConnection(request: LookupName, context: StatusOnlyCallContext) -> EventLoopFuture<HaveDuplex>

  /// api v2 duplex method (block/future)
  func waitingForDuplex(request: LookupName, context: StatusOnlyCallContext) -> EventLoopFuture<HaveDuplex>

  func getRemoteMachineInfo(request: LookupName, context: StatusOnlyCallContext) -> EventLoopFuture<RemoteMachineInfo>

  func getRemoteMachineAvatar(request: LookupName, context: StreamingResponseCallContext<RemoteMachineAvatar>) -> EventLoopFuture<GRPCStatus>

  func processTransferOpRequest(request: TransferOpRequest, context: StatusOnlyCallContext) -> EventLoopFuture<VoidType>

  func pauseTransferOp(request: OpInfo, context: StatusOnlyCallContext) -> EventLoopFuture<VoidType>

  /// Receiver methods
  func startTransfer(request: OpInfo, context: StreamingResponseCallContext<FileChunk>) -> EventLoopFuture<GRPCStatus>

  /// Both
  func cancelTransferOpRequest(request: OpInfo, context: StatusOnlyCallContext) -> EventLoopFuture<VoidType>

  func stopTransfer(request: StopInfo, context: StatusOnlyCallContext) -> EventLoopFuture<VoidType>

  func ping(request: LookupName, context: StatusOnlyCallContext) -> EventLoopFuture<VoidType>
}

extension WarpProvider {
  internal var serviceName: Substring {
    return WarpServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CheckDuplexConnection":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<LookupName>(),
        responseSerializer: ProtobufSerializer<HaveDuplex>(),
        interceptors: self.interceptors?.makeCheckDuplexConnectionInterceptors() ?? [],
        userFunction: self.checkDuplexConnection(request:context:)
      )

    case "WaitingForDuplex":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<LookupName>(),
        responseSerializer: ProtobufSerializer<HaveDuplex>(),
        interceptors: self.interceptors?.makeWaitingForDuplexInterceptors() ?? [],
        userFunction: self.waitingForDuplex(request:context:)
      )

    case "GetRemoteMachineInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<LookupName>(),
        responseSerializer: ProtobufSerializer<RemoteMachineInfo>(),
        interceptors: self.interceptors?.makeGetRemoteMachineInfoInterceptors() ?? [],
        userFunction: self.getRemoteMachineInfo(request:context:)
      )

    case "GetRemoteMachineAvatar":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<LookupName>(),
        responseSerializer: ProtobufSerializer<RemoteMachineAvatar>(),
        interceptors: self.interceptors?.makeGetRemoteMachineAvatarInterceptors() ?? [],
        userFunction: self.getRemoteMachineAvatar(request:context:)
      )

    case "ProcessTransferOpRequest":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<TransferOpRequest>(),
        responseSerializer: ProtobufSerializer<VoidType>(),
        interceptors: self.interceptors?.makeProcessTransferOpRequestInterceptors() ?? [],
        userFunction: self.processTransferOpRequest(request:context:)
      )

    case "PauseTransferOp":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OpInfo>(),
        responseSerializer: ProtobufSerializer<VoidType>(),
        interceptors: self.interceptors?.makePauseTransferOpInterceptors() ?? [],
        userFunction: self.pauseTransferOp(request:context:)
      )

    case "StartTransfer":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OpInfo>(),
        responseSerializer: ProtobufSerializer<FileChunk>(),
        interceptors: self.interceptors?.makeStartTransferInterceptors() ?? [],
        userFunction: self.startTransfer(request:context:)
      )

    case "CancelTransferOpRequest":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OpInfo>(),
        responseSerializer: ProtobufSerializer<VoidType>(),
        interceptors: self.interceptors?.makeCancelTransferOpRequestInterceptors() ?? [],
        userFunction: self.cancelTransferOpRequest(request:context:)
      )

    case "StopTransfer":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<StopInfo>(),
        responseSerializer: ProtobufSerializer<VoidType>(),
        interceptors: self.interceptors?.makeStopTransferInterceptors() ?? [],
        userFunction: self.stopTransfer(request:context:)
      )

    case "Ping":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<LookupName>(),
        responseSerializer: ProtobufSerializer<VoidType>(),
        interceptors: self.interceptors?.makePingInterceptors() ?? [],
        userFunction: self.ping(request:context:)
      )

    default:
      return nil
    }
  }
}
#if compiler(>=5.5.2) && canImport(_Concurrency)

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol WarpAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: WarpServerInterceptorFactoryProtocol? { get }

  /// Sender methods
  /// api v1 duplex method (ping style)
  @Sendable func checkDuplexConnection(
    request: LookupName,
    context: GRPCAsyncServerCallContext
  ) async throws -> HaveDuplex

  /// api v2 duplex method (block/future)
  @Sendable func waitingForDuplex(
    request: LookupName,
    context: GRPCAsyncServerCallContext
  ) async throws -> HaveDuplex

  @Sendable func getRemoteMachineInfo(
    request: LookupName,
    context: GRPCAsyncServerCallContext
  ) async throws -> RemoteMachineInfo

  @Sendable func getRemoteMachineAvatar(
    request: LookupName,
    responseStream: GRPCAsyncResponseStreamWriter<RemoteMachineAvatar>,
    context: GRPCAsyncServerCallContext
  ) async throws

  @Sendable func processTransferOpRequest(
    request: TransferOpRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> VoidType

  @Sendable func pauseTransferOp(
    request: OpInfo,
    context: GRPCAsyncServerCallContext
  ) async throws -> VoidType

  /// Receiver methods
  @Sendable func startTransfer(
    request: OpInfo,
    responseStream: GRPCAsyncResponseStreamWriter<FileChunk>,
    context: GRPCAsyncServerCallContext
  ) async throws

  /// Both
  @Sendable func cancelTransferOpRequest(
    request: OpInfo,
    context: GRPCAsyncServerCallContext
  ) async throws -> VoidType

  @Sendable func stopTransfer(
    request: StopInfo,
    context: GRPCAsyncServerCallContext
  ) async throws -> VoidType

  @Sendable func ping(
    request: LookupName,
    context: GRPCAsyncServerCallContext
  ) async throws -> VoidType
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension WarpAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return WarpServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return WarpServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: WarpServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CheckDuplexConnection":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<LookupName>(),
        responseSerializer: ProtobufSerializer<HaveDuplex>(),
        interceptors: self.interceptors?.makeCheckDuplexConnectionInterceptors() ?? [],
        wrapping: self.checkDuplexConnection(request:context:)
      )

    case "WaitingForDuplex":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<LookupName>(),
        responseSerializer: ProtobufSerializer<HaveDuplex>(),
        interceptors: self.interceptors?.makeWaitingForDuplexInterceptors() ?? [],
        wrapping: self.waitingForDuplex(request:context:)
      )

    case "GetRemoteMachineInfo":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<LookupName>(),
        responseSerializer: ProtobufSerializer<RemoteMachineInfo>(),
        interceptors: self.interceptors?.makeGetRemoteMachineInfoInterceptors() ?? [],
        wrapping: self.getRemoteMachineInfo(request:context:)
      )

    case "GetRemoteMachineAvatar":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<LookupName>(),
        responseSerializer: ProtobufSerializer<RemoteMachineAvatar>(),
        interceptors: self.interceptors?.makeGetRemoteMachineAvatarInterceptors() ?? [],
        wrapping: self.getRemoteMachineAvatar(request:responseStream:context:)
      )

    case "ProcessTransferOpRequest":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<TransferOpRequest>(),
        responseSerializer: ProtobufSerializer<VoidType>(),
        interceptors: self.interceptors?.makeProcessTransferOpRequestInterceptors() ?? [],
        wrapping: self.processTransferOpRequest(request:context:)
      )

    case "PauseTransferOp":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OpInfo>(),
        responseSerializer: ProtobufSerializer<VoidType>(),
        interceptors: self.interceptors?.makePauseTransferOpInterceptors() ?? [],
        wrapping: self.pauseTransferOp(request:context:)
      )

    case "StartTransfer":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OpInfo>(),
        responseSerializer: ProtobufSerializer<FileChunk>(),
        interceptors: self.interceptors?.makeStartTransferInterceptors() ?? [],
        wrapping: self.startTransfer(request:responseStream:context:)
      )

    case "CancelTransferOpRequest":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<OpInfo>(),
        responseSerializer: ProtobufSerializer<VoidType>(),
        interceptors: self.interceptors?.makeCancelTransferOpRequestInterceptors() ?? [],
        wrapping: self.cancelTransferOpRequest(request:context:)
      )

    case "StopTransfer":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<StopInfo>(),
        responseSerializer: ProtobufSerializer<VoidType>(),
        interceptors: self.interceptors?.makeStopTransferInterceptors() ?? [],
        wrapping: self.stopTransfer(request:context:)
      )

    case "Ping":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<LookupName>(),
        responseSerializer: ProtobufSerializer<VoidType>(),
        interceptors: self.interceptors?.makePingInterceptors() ?? [],
        wrapping: self.ping(request:context:)
      )

    default:
      return nil
    }
  }
}

#endif // compiler(>=5.5.2) && canImport(_Concurrency)

internal protocol WarpServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'checkDuplexConnection'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCheckDuplexConnectionInterceptors() -> [ServerInterceptor<LookupName, HaveDuplex>]

  /// - Returns: Interceptors to use when handling 'waitingForDuplex'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeWaitingForDuplexInterceptors() -> [ServerInterceptor<LookupName, HaveDuplex>]

  /// - Returns: Interceptors to use when handling 'getRemoteMachineInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetRemoteMachineInfoInterceptors() -> [ServerInterceptor<LookupName, RemoteMachineInfo>]

  /// - Returns: Interceptors to use when handling 'getRemoteMachineAvatar'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetRemoteMachineAvatarInterceptors() -> [ServerInterceptor<LookupName, RemoteMachineAvatar>]

  /// - Returns: Interceptors to use when handling 'processTransferOpRequest'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeProcessTransferOpRequestInterceptors() -> [ServerInterceptor<TransferOpRequest, VoidType>]

  /// - Returns: Interceptors to use when handling 'pauseTransferOp'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePauseTransferOpInterceptors() -> [ServerInterceptor<OpInfo, VoidType>]

  /// - Returns: Interceptors to use when handling 'startTransfer'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStartTransferInterceptors() -> [ServerInterceptor<OpInfo, FileChunk>]

  /// - Returns: Interceptors to use when handling 'cancelTransferOpRequest'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCancelTransferOpRequestInterceptors() -> [ServerInterceptor<OpInfo, VoidType>]

  /// - Returns: Interceptors to use when handling 'stopTransfer'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStopTransferInterceptors() -> [ServerInterceptor<StopInfo, VoidType>]

  /// - Returns: Interceptors to use when handling 'ping'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePingInterceptors() -> [ServerInterceptor<LookupName, VoidType>]
}

internal enum WarpServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Warp",
    fullName: "Warp",
    methods: [
      WarpServerMetadata.Methods.checkDuplexConnection,
      WarpServerMetadata.Methods.waitingForDuplex,
      WarpServerMetadata.Methods.getRemoteMachineInfo,
      WarpServerMetadata.Methods.getRemoteMachineAvatar,
      WarpServerMetadata.Methods.processTransferOpRequest,
      WarpServerMetadata.Methods.pauseTransferOp,
      WarpServerMetadata.Methods.startTransfer,
      WarpServerMetadata.Methods.cancelTransferOpRequest,
      WarpServerMetadata.Methods.stopTransfer,
      WarpServerMetadata.Methods.ping,
    ]
  )

  internal enum Methods {
    internal static let checkDuplexConnection = GRPCMethodDescriptor(
      name: "CheckDuplexConnection",
      path: "/Warp/CheckDuplexConnection",
      type: GRPCCallType.unary
    )

    internal static let waitingForDuplex = GRPCMethodDescriptor(
      name: "WaitingForDuplex",
      path: "/Warp/WaitingForDuplex",
      type: GRPCCallType.unary
    )

    internal static let getRemoteMachineInfo = GRPCMethodDescriptor(
      name: "GetRemoteMachineInfo",
      path: "/Warp/GetRemoteMachineInfo",
      type: GRPCCallType.unary
    )

    internal static let getRemoteMachineAvatar = GRPCMethodDescriptor(
      name: "GetRemoteMachineAvatar",
      path: "/Warp/GetRemoteMachineAvatar",
      type: GRPCCallType.serverStreaming
    )

    internal static let processTransferOpRequest = GRPCMethodDescriptor(
      name: "ProcessTransferOpRequest",
      path: "/Warp/ProcessTransferOpRequest",
      type: GRPCCallType.unary
    )

    internal static let pauseTransferOp = GRPCMethodDescriptor(
      name: "PauseTransferOp",
      path: "/Warp/PauseTransferOp",
      type: GRPCCallType.unary
    )

    internal static let startTransfer = GRPCMethodDescriptor(
      name: "StartTransfer",
      path: "/Warp/StartTransfer",
      type: GRPCCallType.serverStreaming
    )

    internal static let cancelTransferOpRequest = GRPCMethodDescriptor(
      name: "CancelTransferOpRequest",
      path: "/Warp/CancelTransferOpRequest",
      type: GRPCCallType.unary
    )

    internal static let stopTransfer = GRPCMethodDescriptor(
      name: "StopTransfer",
      path: "/Warp/StopTransfer",
      type: GRPCCallType.unary
    )

    internal static let ping = GRPCMethodDescriptor(
      name: "Ping",
      path: "/Warp/Ping",
      type: GRPCCallType.unary
    )
  }
}
/// To build a server, implement a class that conforms to this protocol.
internal protocol WarpRegistrationProvider: CallHandlerProvider {
  var interceptors: WarpRegistrationServerInterceptorFactoryProtocol? { get }

  func requestCertificate(request: RegRequest, context: StatusOnlyCallContext) -> EventLoopFuture<RegResponse>
}

extension WarpRegistrationProvider {
  internal var serviceName: Substring {
    return WarpRegistrationServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "RequestCertificate":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<RegRequest>(),
        responseSerializer: ProtobufSerializer<RegResponse>(),
        interceptors: self.interceptors?.makeRequestCertificateInterceptors() ?? [],
        userFunction: self.requestCertificate(request:context:)
      )

    default:
      return nil
    }
  }
}
#if compiler(>=5.5.2) && canImport(_Concurrency)

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol WarpRegistrationAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: WarpRegistrationServerInterceptorFactoryProtocol? { get }

  @Sendable func requestCertificate(
    request: RegRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> RegResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension WarpRegistrationAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return WarpRegistrationServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return WarpRegistrationServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: WarpRegistrationServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "RequestCertificate":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<RegRequest>(),
        responseSerializer: ProtobufSerializer<RegResponse>(),
        interceptors: self.interceptors?.makeRequestCertificateInterceptors() ?? [],
        wrapping: self.requestCertificate(request:context:)
      )

    default:
      return nil
    }
  }
}

#endif // compiler(>=5.5.2) && canImport(_Concurrency)

internal protocol WarpRegistrationServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'requestCertificate'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRequestCertificateInterceptors() -> [ServerInterceptor<RegRequest, RegResponse>]
}

internal enum WarpRegistrationServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "WarpRegistration",
    fullName: "WarpRegistration",
    methods: [
      WarpRegistrationServerMetadata.Methods.requestCertificate,
    ]
  )

  internal enum Methods {
    internal static let requestCertificate = GRPCMethodDescriptor(
      name: "RequestCertificate",
      path: "/WarpRegistration/RequestCertificate",
      type: GRPCCallType.unary
    )
  }
}
