# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

lane :increment_version_and_build_number do

  # Ensure that a Git tag is present for a release build
  unless ENV["CIRCLE_TAG"]
    UI.important("Should be run on a tag to set version number")
  else
    increment_version_number(version_number: ENV["CIRCLE_TAG"])
  end

  unless ENV["CIRCLE_BUILD_NUM"]
    UI.user_error!("Expected CIRCLE_BUILD_NUM to be set")
    return
  end

  increment_build_number(build_number: ENV["CIRCLE_BUILD_NUM"])
end

platform :ios do

  before_all do
    setup_circle_ci
  end

  lane :tests do
    run_tests(
      scheme: "Tests Shared (iOS)",
      device: "iPhone 13 mini",
      cloned_source_packages_path: "SourcePackages",
      include_simulator_logs: false
    )
  end

  desc "Ad-hoc build"
  lane :adhoc do
    match(
      type: "adhoc",
      # skip_set_partition_list: true,
      profile_name: "ad-hoc profile"
    )
    gym(
      scheme: "warpinator-project (iOS)",
      export_method: "ad-hoc",
      output_name: "warpinator-swift.ipa"
    )
  end
  
end

platform :mac do

    before_all do
      setup_circle_ci

      cert_url = "https://www.apple.com/certificateauthority/DeveloperIDG2CA.cer"

      filename = "DeveloperIDG2CA.cer"
  
      # build command
      import_command = "curl -f -o #{filename} #{cert_url} && security import #{filename} && rm #{filename}"
      # Executes command
      stdout, stderr, status = Open3.capture3(import_command)
      unless status.success?
        unless stderr.include?("The specified item already exists in the keychain.")
          UI.command_output(stdout)
          UI.command_output(stderr)

          UI.user_error!("Could not install certificate")
        end
        UI.verbose("The Certificate was already installed")
      end
  
    end
  
    lane :tests do
      
      match(type: "development", 
            app_identifier: "io.github.emanuelkuhn.*")

      run_tests(
        scheme: "warpinator-project (macOS)",
        cloned_source_packages_path: "SourcePackages"
      )
    end

    lane :build do

      increment_version_and_build_number

      match(type: "developer_id", platform: "macos", profile_name: "mac release profile")

      build_app(
        scheme: "warpinator-project (macOS)",
        cloned_source_packages_path: "SourcePackages",
        export_method: "mac-application",
        configuration: "Release",
        output_directory: "release"
      )

      app_store_connect_api_key

      notarize(package: "release/warpinator-project.app")

    end
end

